# app/services/tickets_monitoring.py

import asyncio
import logging
from sqlalchemy.orm import Session
from app.services.aviasales_api import AviasalesAPI
from app.telegram_bot.handlers import send_telegram_message
from app.models import Card
from app.schemas import TicketCreate
from app.config.database import SessionLocal
from app.crud.tickets import get_ticket_by_flight, create_ticket

logger = logging.getLogger(__name__)


class TicketMonitor:
    def __init__(self, db: Session):
        self.db = db
        self.api = AviasalesAPI(db=self.db)

    def check_and_notify(self):
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∏–ª–µ—Ç–æ–≤")
        cards = self.db.query(Card).all()

        for card in cards:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥–∞—Ç—ã
                tickets = self.api.get_prices_for_dates(
                    origin=card.origin,
                    destination=card.destination,
                    departure_at=card.flight_date.strftime('%Y-%m-%d'),
                    currency='rub',
                    one_way=True,
                    direct=False,
                    limit=1000,
                    page=1,
                    sorting='price',
                    unique=False
                )

                if not tickets:
                    logger.info(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è {card.origin} -> {card.destination} –Ω–∞ {card.flight_date}")
                    continue

                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç
                cheapest_ticket = min(tickets, key=lambda x: x.price)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥–∞—Ç—ã
                existing_ticket = get_ticket_by_flight(
                    self.db,
                    from_city=cheapest_ticket.from_city,
                    to_city=cheapest_ticket.to_city,
                    flight_date=cheapest_ticket.flight_date
                )

                if not existing_ticket:
                    if cheapest_ticket.price <= card.price_threshold:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        message = (
                            f"üî• –ù–∞–π–¥–µ–Ω –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç!\n"
                            f"–ú–∞—Ä—à—Ä—É—Ç: {cheapest_ticket.from_city} -> {cheapest_ticket.to_city}\n"
                            f"–¶–µ–Ω–∞: {cheapest_ticket.price} —Ä—É–±.\n"
                            f"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {cheapest_ticket.flight_date}\n"
                            f"–°—Å—ã–ª–∫–∞: https://www.aviasales.ru{cheapest_ticket.link}"
                        )
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        send_telegram_message(card.user.chat_id, message)
                        logger.info(f"–ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {card.user.chat_id}")

                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–∏–ª–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        ticket_data = TicketCreate(
                            from_city=cheapest_ticket.from_city,
                            to_city=cheapest_ticket.to_city,
                            price=cheapest_ticket.price,
                            flight_date=cheapest_ticket.flight_date,
                            link=cheapest_ticket.link,
                            airline=cheapest_ticket.airline,
                            stops=cheapest_ticket.stops
                        )
                        create_ticket(self.db, ticket_data)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç: {cheapest_ticket.link}")
                    else:
                        logger.info(
                            f"–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç ({cheapest_ticket.price} —Ä—É–±.) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {card.card_id}"
                        )
                else:
                    logger.info(f"–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –±–∏–ª–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ: {existing_ticket.link}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {card.card_id}: {e}")

        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω")


def run_ticket_monitoring():
    db = SessionLocal()
    try:
        monitor = TicketMonitor(db)
        asyncio.run(monitor.check_and_notify())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∏–ª–µ—Ç–æ–≤: {e}")
    finally:
        db.close()
